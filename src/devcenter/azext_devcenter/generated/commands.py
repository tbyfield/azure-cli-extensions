# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-statements
# pylint: disable=too-many-locals
# pylint: disable=bad-continuation
# pylint: disable=line-too-long

from azure.cli.core.commands import CliCommandType
from azext_devcenter.generated._client_factory import (
    cf_dev_center,
    cf_project,
    cf_attached_network,
    cf_gallery,
    cf_image,
    cf_image_version,
    cf_catalog,
    cf_environment_type,
    cf_project_environment_type,
    cf_dev_box_definition,
    cf_operation_statuses,
    cf_usage,
    cf_sku,
    cf_pool,
    cf_schedule,
    cf_network_connection,
)


devcenter_attached_network = CliCommandType(
    operations_tmpl=(
        'azext_devcenter.vendored_sdks.devcenter.operations._attached_networks_operations#AttachedNetworksOperations.{}'
    ),
    client_factory=cf_attached_network,
)


devcenter_catalog = CliCommandType(
    operations_tmpl='azext_devcenter.vendored_sdks.devcenter.operations._catalogs_operations#CatalogsOperations.{}',
    client_factory=cf_catalog,
)


devcenter_dev_box_definition = CliCommandType(
    operations_tmpl='azext_devcenter.vendored_sdks.devcenter.operations._dev_box_definitions_operations#DevBoxDefinitionsOperations.{}',
    client_factory=cf_dev_box_definition,
)


devcenter_dev_center = CliCommandType(
    operations_tmpl=(
        'azext_devcenter.vendored_sdks.devcenter.operations._dev_centers_operations#DevCentersOperations.{}'
    ),
    client_factory=cf_dev_center,
)


devcenter_environment_type = CliCommandType(
    operations_tmpl=(
        'azext_devcenter.vendored_sdks.devcenter.operations._environment_types_operations#EnvironmentTypesOperations.{}'
    ),
    client_factory=cf_environment_type,
)


devcenter_gallery = CliCommandType(
    operations_tmpl='azext_devcenter.vendored_sdks.devcenter.operations._galleries_operations#GalleriesOperations.{}',
    client_factory=cf_gallery,
)


devcenter_image = CliCommandType(
    operations_tmpl='azext_devcenter.vendored_sdks.devcenter.operations._images_operations#ImagesOperations.{}',
    client_factory=cf_image,
)


devcenter_image_version = CliCommandType(
    operations_tmpl=(
        'azext_devcenter.vendored_sdks.devcenter.operations._image_versions_operations#ImageVersionsOperations.{}'
    ),
    client_factory=cf_image_version,
)


devcenter_network_connection = CliCommandType(
    operations_tmpl='azext_devcenter.vendored_sdks.devcenter.operations._network_connections_operations#NetworkConnectionsOperations.{}',
    client_factory=cf_network_connection,
)


devcenter_operation_statuses = CliCommandType(
    operations_tmpl='azext_devcenter.vendored_sdks.devcenter.operations._operation_statuses_operations#OperationStatusesOperations.{}',
    client_factory=cf_operation_statuses,
)


devcenter_pool = CliCommandType(
    operations_tmpl='azext_devcenter.vendored_sdks.devcenter.operations._pools_operations#PoolsOperations.{}',
    client_factory=cf_pool,
)


devcenter_project = CliCommandType(
    operations_tmpl='azext_devcenter.vendored_sdks.devcenter.operations._projects_operations#ProjectsOperations.{}',
    client_factory=cf_project,
)


devcenter_project_environment_type = CliCommandType(
    operations_tmpl='azext_devcenter.vendored_sdks.devcenter.operations._project_environment_types_operations#ProjectEnvironmentTypesOperations.{}',
    client_factory=cf_project_environment_type,
)


devcenter_schedule = CliCommandType(
    operations_tmpl='azext_devcenter.vendored_sdks.devcenter.operations._schedules_operations#SchedulesOperations.{}',
    client_factory=cf_schedule,
)


devcenter_sku = CliCommandType(
    operations_tmpl='azext_devcenter.vendored_sdks.devcenter.operations._skus_operations#SkusOperations.{}',
    client_factory=cf_sku,
)


devcenter_usage = CliCommandType(
    operations_tmpl='azext_devcenter.vendored_sdks.devcenter.operations._usages_operations#UsagesOperations.{}',
    client_factory=cf_usage,
)


def load_command_table(self, _):

    with self.command_group(
        'devcenter attached-network', devcenter_attached_network, client_factory=cf_attached_network
    ) as g:
        g.custom_command('list', 'devcenter_attached_network_list')
        g.custom_show_command('show', 'devcenter_attached_network_show')
        g.custom_command('create', 'devcenter_attached_network_create', supports_no_wait=True)
        g.custom_command('update', 'devcenter_attached_network_update', supports_no_wait=True)
        g.custom_command('delete', 'devcenter_attached_network_delete', supports_no_wait=True, confirmation=True)
        g.custom_wait_command('wait', 'devcenter_attached_network_show')

    with self.command_group('devcenter catalog', devcenter_catalog, client_factory=cf_catalog) as g:
        g.custom_command('list', 'devcenter_catalog_list')
        g.custom_show_command('show', 'devcenter_catalog_show')
        g.custom_command('create', 'devcenter_catalog_create', supports_no_wait=True)
        g.custom_command('update', 'devcenter_catalog_update', supports_no_wait=True)
        g.custom_command('delete', 'devcenter_catalog_delete', supports_no_wait=True, confirmation=True)
        g.custom_command('sync', 'devcenter_catalog_sync', supports_no_wait=True)
        g.custom_wait_command('wait', 'devcenter_catalog_show')

    with self.command_group(
        'devcenter dev-box-definition', devcenter_dev_box_definition, client_factory=cf_dev_box_definition
    ) as g:
        g.custom_command('list', 'devcenter_dev_box_definition_list')
        g.custom_show_command('show', 'devcenter_dev_box_definition_show')
        g.custom_command('create', 'devcenter_dev_box_definition_create', supports_no_wait=True)
        g.custom_command('update', 'devcenter_dev_box_definition_update', supports_no_wait=True)
        g.custom_command('delete', 'devcenter_dev_box_definition_delete', supports_no_wait=True, confirmation=True)
        g.custom_wait_command('wait', 'devcenter_dev_box_definition_show')

    with self.command_group('devcenter dev-center', devcenter_dev_center, client_factory=cf_dev_center) as g:
        g.custom_command('list', 'devcenter_dev_center_list')
        g.custom_show_command('show', 'devcenter_dev_center_show')
        g.custom_command('create', 'devcenter_dev_center_create', supports_no_wait=True)
        g.custom_command('update', 'devcenter_dev_center_update', supports_no_wait=True)
        g.custom_command('delete', 'devcenter_dev_center_delete', supports_no_wait=True, confirmation=True)
        g.custom_wait_command('wait', 'devcenter_dev_center_show')

    with self.command_group(
        'devcenter environment-type', devcenter_environment_type, client_factory=cf_environment_type
    ) as g:
        g.custom_command('list', 'devcenter_environment_type_list')
        g.custom_show_command('show', 'devcenter_environment_type_show')
        g.custom_command('create', 'devcenter_environment_type_create')
        g.custom_command('update', 'devcenter_environment_type_update')
        g.custom_command('delete', 'devcenter_environment_type_delete', confirmation=True)

    with self.command_group('devcenter gallery', devcenter_gallery, client_factory=cf_gallery) as g:
        g.custom_command('list', 'devcenter_gallery_list')
        g.custom_show_command('show', 'devcenter_gallery_show')
        g.custom_command('create', 'devcenter_gallery_create', supports_no_wait=True)
        g.generic_update_command(
            'update',
            supports_no_wait=True,
            custom_func_name='devcenter_gallery_update',
            setter_arg_name='body',
            setter_name='begin_create_or_update',
        )
        g.custom_command('delete', 'devcenter_gallery_delete', supports_no_wait=True, confirmation=True)
        g.custom_wait_command('wait', 'devcenter_gallery_show')

    with self.command_group('devcenter image', devcenter_image, client_factory=cf_image) as g:
        g.custom_command('list', 'devcenter_image_list')
        g.custom_show_command('show', 'devcenter_image_show')

    with self.command_group('devcenter image-version', devcenter_image_version, client_factory=cf_image_version) as g:
        g.custom_command('list', 'devcenter_image_version_list')
        g.custom_show_command('show', 'devcenter_image_version_show')

    with self.command_group(
        'devcenter network-connection', devcenter_network_connection, client_factory=cf_network_connection
    ) as g:
        g.custom_command('list', 'devcenter_network_connection_list')
        g.custom_show_command('show', 'devcenter_network_connection_show')
        g.custom_command('create', 'devcenter_network_connection_create', supports_no_wait=True)
        g.custom_command('update', 'devcenter_network_connection_update', supports_no_wait=True)
        g.custom_command('delete', 'devcenter_network_connection_delete', supports_no_wait=True, confirmation=True)
        g.custom_command('list-health-detail', 'devcenter_network_connection_list_health_detail')
        g.custom_command('run-health-check', 'devcenter_network_connection_run_health_check')
        g.custom_command('show-health-detail', 'devcenter_network_connection_show_health_detail')
        g.custom_wait_command('wait', 'devcenter_network_connection_show')

    with self.command_group(
        'devcenter operation-statuses', devcenter_operation_statuses, client_factory=cf_operation_statuses
    ) as g:
        g.custom_show_command('show', 'devcenter_operation_statuses_show')

    with self.command_group('devcenter pool', devcenter_pool, client_factory=cf_pool) as g:
        g.custom_command('list', 'devcenter_pool_list')
        g.custom_show_command('show', 'devcenter_pool_show')
        g.custom_command('create', 'devcenter_pool_create', supports_no_wait=True)
        g.custom_command('update', 'devcenter_pool_update', supports_no_wait=True)
        g.custom_command('delete', 'devcenter_pool_delete', supports_no_wait=True, confirmation=True)
        g.custom_wait_command('wait', 'devcenter_pool_show')

    with self.command_group('devcenter project', devcenter_project, client_factory=cf_project) as g:
        g.custom_command('list', 'devcenter_project_list')
        g.custom_show_command('show', 'devcenter_project_show')
        g.custom_command('create', 'devcenter_project_create', supports_no_wait=True)
        g.custom_command('update', 'devcenter_project_update', supports_no_wait=True)
        g.custom_command('delete', 'devcenter_project_delete', supports_no_wait=True, confirmation=True)
        g.custom_wait_command('wait', 'devcenter_project_show')

    with self.command_group(
        'devcenter project-environment-type',
        devcenter_project_environment_type,
        client_factory=cf_project_environment_type,
    ) as g:
        g.custom_command('list', 'devcenter_project_environment_type_list')
        g.custom_show_command('show', 'devcenter_project_environment_type_show')
        g.custom_command('create', 'devcenter_project_environment_type_create')
        g.custom_command('update', 'devcenter_project_environment_type_update')
        g.custom_command('delete', 'devcenter_project_environment_type_delete', confirmation=True)

    with self.command_group('devcenter schedule', devcenter_schedule, client_factory=cf_schedule) as g:
        g.custom_command('list', 'devcenter_schedule_list')
        g.custom_show_command('show', 'devcenter_schedule_show')
        g.custom_command('create', 'devcenter_schedule_create', supports_no_wait=True)
        g.custom_command('update', 'devcenter_schedule_update', supports_no_wait=True)
        g.custom_command('delete', 'devcenter_schedule_delete', supports_no_wait=True, confirmation=True)
        g.custom_wait_command('wait', 'devcenter_schedule_show')

    with self.command_group('devcenter sku', devcenter_sku, client_factory=cf_sku) as g:
        g.custom_command('list', 'devcenter_sku_list')

    with self.command_group('devcenter usage', devcenter_usage, client_factory=cf_usage) as g:
        g.custom_command('list', 'devcenter_usage_list')

    with self.command_group('devcenter', is_experimental=True):
        pass
